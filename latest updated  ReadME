Okay, here is a comprehensive README generated based on the contents of the `tick_db-master` folder. It incorporates details from the existing `updated README.md` and adds summaries for other key files.

```markdown
# Sierra Chart Tick & Depth ETL Pipeline (tick_db-master)

This repository contains a set of Python tools to build and maintain a local SQLite database from Sierra Chart time & sales (tick) data and market depth records [cite: uploaded:tick_db-master/updated README.md]. The pipeline extracts data from Sierra Chart’s data files, transforms it according to user-defined parameters, and loads it into a structured SQLite database for further analysis, backtesting, or live monitoring [cite: uploaded:tick_db-master/updated README.md].

> **Note:** Sierra Chart does not store time & sales data directly; instead, it records intraday data files (.scid) that can be interpreted as time & sales when configured to record one trade per bar [cite: uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/README.md]. This repository also processes market depth data stored in .depth files [cite: uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/README.md].

---

## Table of Contents

* [Features](#features)
* [Repository Structure](#repository-structure)
* [File Descriptions](#file-descriptions)
* [Prerequisites](#prerequisites)
* [Sierra Chart Configuration](#sierra-chart-configuration)
    * [Time & Sales (Tick) Data](#time--sales-tick-data)
    * [Market Depth Data](#market-depth-data)
    * [Intraday File Update List](#intraday-file-update-list)
* [Configuration File (config.json)](#configuration-file-configjson)
* [ETL Pipeline (etl.py)](#etl-pipeline-etlpy)
    * [One-shot Mode vs. Continuous Mode](#one-shot-mode-vs-continuous-mode)
    * [Logging and Monitoring](#logging-and-monitoring)
* [Database Schema](#database-schema)
* [Additional Utilities](#additional-utilities)
    * [Symbol File List Generator (update_file_list.py)](#symbol-file-list-generator-update_file_listpy)
    * [Synchronized Iterator (sym_it.py)](#synchronized-iterator-sym_itpy)
* [Troubleshooting](#troubleshooting)
* [License](#license)

---

## Features

* **ETL for Time & Sales:** Parses Sierra Chart intraday (.scid) files to extract trade records (timestamp, price, quantity, side) and load them into a SQLite table [cite: uploaded:tick_db-master/updated README.md].
* **ETL for Market Depth:** Parses market depth (.depth) files to extract order book update events (timestamp, command, flags, number of orders, price, quantity) and store them in a separate table [cite: uploaded:tick_db-master/updated README.md].
* **Continuous Monitoring:** Option to run the ETL pipeline in continuous mode to periodically poll the data files for new records and update the database [cite: uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/etl.py].
* **Robust Filename Parsing & Checkpointing:** Automatically handles filename variations and maintains checkpoints in the configuration (`config.json`) to process only new data [cite: uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/etl.py].
* **Logging:** Extensive console logging helps monitor processing activity, including record counts and offsets [cite: uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/etl.py, uploaded:tick_db-master/src/tick_db/db.py].

---

## Repository Structure

```
tick_db-master/
├── build/                      # Build artifacts (typically generated during packaging)
│   └── lib/
│       └── tick_db/            # Compiled/packaged library code mirror of src/tick_db
│           ├── db.py
│           ├── parsers.py
│           └── sym_it.py
├── src/                        # Source code directory
│   ├── tick_db/                # Main package directory
│   │   ├── __init__.py         # Package initializer (empty)
│   │   ├── db.py               # Database connection, table creation, data loading functions
│   │   ├── parsers.py          # Functions to parse Sierra Chart .scid and .depth files
│   │   └── sym_it.py           # Synchronized iterator for TAS and Depth data
│   └── tick_db_etl.egg-info/   # Packaging metadata (generated by setuptools)
│       ├── PKG-INFO
│       ├── SOURCES.txt         # List of files included in the package
│       ├── dependency_links.txt
│       ├── requires.txt        # Package dependencies (e.g., numpy)
│       └── top_level.txt       # Top-level package name
├── config.json                 # Configuration for contracts, paths, and settings
├── etl.py                      # Main ETL script to run the data pipeline
├── README.md                   # Original README file
├── setup.cfg                   # Configuration for building the package (setuptools)
├── updated README.md           # An updated, more detailed README file
└── update_file_list.py         # Utility script to generate symbol lists for Sierra Chart
```

---

## File Descriptions

* **`config.json`**: Defines contracts to process, database path (`db_path`), Sierra Chart installation root (`sc_root`), price adjustments (`price_adj`), processing flags (`tas`, `depth`), polling interval (`sleep_int`), and checkpoints for processed data (`checkpoint_tas`, `checkpoint_depth`) [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/updated README.md].
* **`etl.py`**: The main script to execute the Extract, Transform, Load process. It reads configuration from `config.json`, uses `parsers.py` to read Sierra Chart files, applies transformations (like price adjustments), and uses `db.py` to load data into the SQLite database. Supports one-shot and continuous modes [cite: uploaded:tick_db-master/etl.py, uploaded:tick_db-master/updated README.md].
* **`README.md`**: The original README providing an overview of the project, focusing on Time & Sales and Market Depth data concepts and Sierra Chart configuration [cite: uploaded:tick_db-master/README.md].
* **`setup.cfg`**: Configuration file for `setuptools`, specifying package metadata (name, version, author), dependencies (`numpy`), and package structure for installation [cite: uploaded:tick_db-master/setup.cfg].
* **`updated README.md`**: A more detailed and structured version of the README, serving as the primary source for this generated README [cite: uploaded:tick_db-master/updated README.md].
* **`update_file_list.py`**: A utility script to generate lists of Sierra Chart symbol filenames based on contract patterns (symbol root, month codes, years) provided as command-line arguments. Useful for Sierra Chart's "Intraday File Update List" feature [cite: uploaded:tick_db-master/update_file_list.py, uploaded:tick_db-master/updated README.md].
* **`src/tick_db/db.py`**: Handles SQLite database interactions. Connects to the database specified in `config.json`, enables WAL mode for better concurrency, creates tables (`_tas`, `_depth`) dynamically for each contract if they don't exist, creates indexes, and provides functions (`load_tas`, `load_depth`) to insert processed data records [cite: uploaded:tick_db-master/src/tick_db/db.py].
* **`src/tick_db/parsers.py`**: Contains the core logic for reading and interpreting Sierra Chart's binary data files. Defines data structures (`intraday_rec`, `tas_rec`, `depth_rec`, `depth_cmd`) and functions (`parse_tas_header`, `parse_tas`, `transform_tas`, `parse_depth_header`, `parse_depth`, `transform_depth`) to handle `.scid` (Time & Sales / Intraday) and `.depth` (Market Depth) files based on their documented formats [cite: uploaded:tick_db-master/src/tick_db/parsers.py, uploaded:tick_db-master/README.md]. Includes logic for applying price adjustments and handling file checkpoints. Also contains a simple benchmarking capability when run directly [cite: uploaded:tick_db-master/src/tick_db/parsers.py].
* **`src/tick_db/sym_it.py`**: Implements the `SymIt` class, a synchronized iterator. Given a symbol, date, and Sierra Chart root path, it reads corresponding `.scid` and `.depth` files, merges the records chronologically based on their timestamps, and allows iterating through the combined event stream (trades and book updates). Supports seeking to a specific timestamp (`set_ts`) and fetching new records (`synchronize`) [cite: uploaded:tick_db-master/src/tick_db/sym_it.py, uploaded:tick_db-master/updated README.md].
* **`src/tick_db_etl.egg-info/`**: Directory containing metadata generated when building the Python package (e.g., using `setuptools`). Includes files listing dependencies (`requires.txt`) and package contents (`SOURCES.txt`) [cite: uploaded:tick_db-master/src/tick_db_etl.egg-info/requires.txt, uploaded:tick_db-master/src/tick_db_etl.egg-info/SOURCES.txt].
* **`build/`**: Directory containing files generated during the package build process. The `lib` subdirectory mirrors the `src` directory structure with the code prepared for distribution [cite: uploaded:tick_db-master/build/lib/tick_db/db.py, uploaded:tick_db-master/build/lib/tick_db/parsers.py, uploaded:tick_db-master/build/lib/tick_db/sym_it.py].

---

## Prerequisites

* **Sierra Chart:** Installed and configured with an active data feed providing tick and market depth data [cite: uploaded:tick_db-master/updated README.md].
* **Python 3:** Python 3.8 or higher is recommended [cite: uploaded:tick_db-master/setup.cfg].
* **NumPy:** Required dependency [cite: uploaded:tick_db-master/src/tick_db_etl.egg-info/requires.txt, uploaded:tick_db-master/setup.cfg]. Install using `pip install numpy`.
* **SQLite:** Used as the database (integrated with Python via `sqlite3`) [cite: uploaded:tick_db-master/updated README.md].

---

## Sierra Chart Configuration

### Time & Sales (Tick) Data

1.  **Configure Tick-by-Tick Data:**
    * In Sierra Chart, go to **Global Settings » Data/Trade Service Settings**.
    * Set **Intraday Data Storage Time Unit** to **1 Tick** [cite: uploaded:tick_db-master/updated README.md]. This records each trade individually in `.scid` files [cite: uploaded:tick_db-master/README.md, uploaded:tick_db-master/updated README.md].
2.  **Verify Data Files:** Check your Sierra Chart `Data` folder (e.g., `C:/SierraChart/Data/`) for `.scid` files like `ESM25_FUT_CME.scid` [cite: uploaded:tick_db-master/updated README.md].

### Market Depth Data

1.  **Enable Depth Recording:**
    * Go to **Global Settings » Symbol Settings**, find your symbol, and set **Record Market Depth Data** to "Yes" [cite: uploaded:tick_db-master/updated README.md].
    * Follow steps 1-8 and 16-18 in the Sierra Chart documentation for the Market Depth Historical Graph study for detailed setup [cite: uploaded:tick_db-master/README.md].
2.  **Verify Data Files:** Depth files are stored in `Data/MarketDepthData/` with names like `Symbol.YYYY-MM-DD.depth` (e.g., `ESM25_FUT_CME.2025-04-01.depth`) [cite: uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/README.md]. Sierra Chart typically allows downloading the last 30 days of depth data [cite: uploaded:tick_db-master/README.md].

### Intraday File Update List

* To keep data updated for many symbols without opening charts for each, use Sierra Chart’s **Intraday File Update List** feature (**Global Settings » Intraday File Update List**) [cite: uploaded:tick_db-master/README.md].
* You can generate a list of filenames using the provided `update_file_list.py` script and paste it into this list [cite: uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/README.md].
* Ensure Sierra Chart connects to the data feed daily to download missing intraday data (up to the limit set in `Maximum Historical Intraday Days to Download`) [cite: uploaded:tick_db-master/README.md]. Data is typically flushed to disk every few seconds (configurable via `Intraday File Flush Time in Milliseconds`) [cite: uploaded:tick_db-master/README.md].

---

## Configuration File (config.json)

The `config.json` file is crucial for controlling the ETL process [cite: uploaded:tick_db-master/updated README.md].

* **`contracts`**: A dictionary where each key is the Sierra Chart symbol string (e.g., `"ESM25_FUT_CME"`) [cite: uploaded:tick_db-master/config.json].
    * `checkpoint_tas`: Last processed record index for the `.scid` file. Initialize to `0` [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].
    * `checkpoint_depth`: Object containing:
        * `date`: Date string (`"YYYY-MM-DD"`) of the last processed `.depth` file. Initialize to `""` [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].
        * `rec`: Last processed record index within that `.depth` file. Initialize to `0` [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].
    * `price_adj`: The price multiplier needed to convert stored integer prices to the correct decimal value. Find this in Sierra Chart under `Chart -> Chart Settings -> Real Time Price Multiplier` [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].
    * `tas`: Boolean (`true`/`false`). Set to `true` to process Time & Sales data for this contract [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].
    * `depth`: Boolean (`true`/`false`). Set to `true` to process Market Depth data for this contract [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].
* **`db_path`**: Full path to the SQLite database file where data will be stored [cite: uploaded:tick_db-master/config.json].
* **`sc_root`**: Full path to the root directory of your Sierra Chart installation (e.g., `"C:/SierraChart"`) [cite: uploaded:tick_db-master/config.json].
* **`sleep_int`**: Time in seconds (can be fractional) for the script to pause between checks for new data when running in continuous mode. Should be similar to Sierra Chart's `Intraday File Flush Time in Milliseconds` setting [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].

*Example `config.json`:*
```json
{
  "contracts": {
    "ESM25_FUT_CME": {
      "checkpoint_tas": 12165006, // Example: Already processed some records
      "checkpoint_depth": {
        "date": "2025-04-01", // Example: Last processed file date
        "rec": 327422        // Example: Records processed in that file
      },
      "price_adj": 0.01,
      "tas": true,
      "depth": true
    }
    // Add more contracts here
  },
  "db_path": "C:\\Path\\To\\Your\\Database\\tick.db", // Adjust path
  "sc_root": "C:/SierraChart",                       // Adjust path
  "sleep_int": 0.30                                  // Adjust interval
}
```
[cite: uploaded:tick_db-master/config.json]

---

## ETL Pipeline (etl.py)

The main script `etl.py` orchestrates the data loading process [cite: uploaded:tick_db-master/etl.py, uploaded:tick_db-master/updated README.md].

* **Reads `config.json`**: Loads contract definitions, paths, and checkpoints [cite: uploaded:tick_db-master/etl.py].
* **Processes Time & Sales**: For enabled contracts (`"tas": true`), it opens the `.scid` file, seeks to the `checkpoint_tas`, parses new records using `parsers.parse_tas`, transforms them using `parsers.transform_tas` (applies `price_adj`), and loads them via `db.load_tas` [cite: uploaded:tick_db-master/etl.py].
* **Processes Market Depth**: For enabled contracts (`"depth": true`), it finds relevant `.depth` files in `sc_root/Data/MarketDepthData/` starting from the `checkpoint_depth.date`. It processes records from the checkpoint (`checkpoint_depth.rec`) in the starting file and all subsequent files, using `parsers.parse_depth`, `parsers.transform_depth`, and `db.load_depth` [cite: uploaded:tick_db-master/etl.py].
* **Updates Checkpoints**: After processing, it updates the `checkpoint_tas` and `checkpoint_depth` values in the `CONFIG` object (loaded from `config.json`) and writes the updated configuration back to `config.json` [cite: uploaded:tick_db-master/etl.py].
* **Commits to Database**: Commits the transaction to the SQLite database and closes the connection gracefully [cite: uploaded:tick_db-master/etl.py].

### One-shot Mode vs. Continuous Mode

Run the ETL script from your terminal in the `tick_db-master` directory:

* **One-shot Mode:** Processes all available new data since the last checkpoint and then exits.
    ```bash
    python etl.py 0
    ```
    or simply:
    ```bash
    python etl.py
    ```
    [cite: uploaded:tick_db-master/etl.py, uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/README.md]
* **Continuous Mode:** Runs indefinitely, checking for new data at intervals specified by `sleep_int` in `config.json`. Use Ctrl+C to stop.
    ```bash
    python etl.py 1
    ```
    [cite: uploaded:tick_db-master/etl.py, uploaded:tick_db-master/updated README.md, uploaded:tick_db-master/README.md]

### Logging and Monitoring

The script prints status messages to the console, including [cite: uploaded:tick_db-master/etl.py, uploaded:tick_db-master/updated README.md]:
* Which contracts and data types (TAS, Depth) are being processed or skipped.
* The number of new records found and processed for each file/contract.
* The starting offset for processing based on checkpoints.
* Confirmation of database commits and connection closure.
* Updated checkpoint values saved to `config.json`.
* Error messages if files are not found or other issues occur.

---

## Database Schema

For each contract defined in `config.json`, the ETL process creates up to two tables in the SQLite database (`db_path`) [cite: uploaded:tick_db-master/src/tick_db/db.py, uploaded:tick_db-master/README.md]:

1.  **Time & Sales Table:** `<contract_name>_tas`
    * `timestamp`: INTEGER (Microseconds since 1899-12-30) [cite: uploaded:tick_db-master/README.md]
    * `price`: REAL (Adjusted price) [cite: uploaded:tick_db-master/README.md]
    * `qty`: INTEGER (Quantity/Volume of the trade) [cite: uploaded:tick_db-master/README.md]
    * `side`: INTEGER (0 = Trade at Bid, 1 = Trade at Ask) [cite: uploaded:tick_db-master/README.md]
    * An index is created on the `timestamp` column [cite: uploaded:tick_db-master/src/tick_db/db.py].

2.  **Market Depth Table:** `<contract_name>_depth`
    * `timestamp`: INTEGER PRIMARY KEY (Microseconds since 1899-12-30) [cite: uploaded:tick_db-master/src/tick_db/db.py, uploaded:tick_db-master/README.md]
    * `command`: INTEGER (Type of book update, e.g., Add Bid, Modify Ask - see `depth_cmd` in `parsers.py`) [cite: uploaded:tick_db-master/README.md, uploaded:tick_db-master/src/tick_db/parsers.py]
    * `flags`: INTEGER (Additional flags for the update) [cite: uploaded:tick_db-master/README.md]
    * `num_orders`: INTEGER (Number of orders at the level, if available) [cite: uploaded:tick_db-master/README.md]
    * `price`: REAL (Adjusted price level) [cite: uploaded:tick_db-master/README.md]
    * `qty`: INTEGER (Total quantity at the price level) [cite: uploaded:tick_db-master/README.md]
    * An index is automatically created on the `timestamp` primary key [cite: uploaded:tick_db-master/src/tick_db/db.py].

Timestamps are 64-bit unsigned integers representing microseconds since `1899-12-30` [cite: uploaded:tick_db-master/README.md]. Prices are adjusted using the `price_adj` factor from `config.json` [cite: uploaded:tick_db-master/README.md].

---

## Additional Utilities

### Symbol File List Generator (update_file_list.py)

* **Purpose**: Generates a list of contract symbol filenames based on patterns defined within the script and date ranges provided via command line [cite: uploaded:tick_db-master/update_file_list.py].
* **Usage**: Modify the `SYMBOLS` list in the script if needed. Run with start and end contract codes (MonthLetter + YearDigits), e.g.:
    ```bash
    python update_file_list.py N23 Z24
    ```
    [cite: uploaded:tick_db-master/update_file_list.py, uploaded:tick_db-master/updated README.md]
* **Output**: Prints a list of filenames (futures and potentially options) to the console. Copy this list and paste it into Sierra Chart's **Intraday File Update List** for bulk data downloading [cite: uploaded:tick_db-master/update_file_list.py, uploaded:tick_db-master/updated README.md].

### Synchronized Iterator (sym_it.py)

* **Purpose**: Provides a `SymIt` class that takes a symbol, date, and `sc_root`, reads the corresponding `.scid` and `.depth` files, and allows iterating through the combined Time & Sales and Market Depth events in chronological order [cite: uploaded:tick_db-master/src/tick_db/sym_it.py, uploaded:tick_db-master/updated README.md].
* **Usage**: Instantiate the class and iterate over it. Useful for reconstructing the order book state alongside trades or feeding data into backtesting engines [cite: uploaded:tick_db-master/updated README.md].
    ```python
    # Example usage (within another script)
    # from tick_db.sym_it import SymIt # Assuming installed package
    from src.tick_db.sym_it import SymIt # If running from repo root

    iterator = SymIt(sc_root="C:/SierraChart", symbol="ESM25_FUT_CME", date="2025-04-01")

    for record in iterator:
        # record will be either a depth record tuple or a tas record tuple
        timestamp = record[0]
        # Process the record...
        print(timestamp, record[1:])

    # Set to a specific time (microseconds since epoch) and continue iterating
    iterator.set_ts(some_timestamp_us, update=True)
    # ...
    ```
    [cite: uploaded:tick_db-master/src/tick_db/sym_it.py]
* Supports timestamp-based seeking (`set_ts`) and slicing (`iterator[start_ts:end_ts]`) [cite: uploaded:tick_db-master/src/tick_db/sym_it.py, uploaded:tick_db-master/README.md].

---

## Troubleshooting

* **No New Records Processed:**
    * Verify Sierra Chart is running and connected to a live data feed [cite: uploaded:tick_db-master/updated README.md].
    * Check the "Last Modified" timestamps of `.scid` and `.depth` files in your Sierra Chart `Data` and `Data/MarketDepthData` folders [cite: uploaded:tick_db-master/updated README.md].
    * Ensure the contract symbol in `config.json` exactly matches the filenames used by Sierra Chart [cite: uploaded:tick_db-master/updated README.md].
    * Confirm the instrument is actively trading [cite: uploaded:tick_db-master/updated README.md].
    * Check the console logs from `etl.py` for messages like "No new records found" or file/directory not found errors [cite: uploaded:tick_db-master/updated README.md].
* **Configuration Errors:**
    * Ensure `db_path` and `sc_root` in `config.json` are correct, using appropriate path separators for your OS (e.g., `\\` or `/`) [cite: uploaded:tick_db-master/config.json].
    * Verify `price_adj` is set correctly based on Sierra Chart's `Real Time Price Multiplier` [cite: uploaded:tick_db-master/config.json, uploaded:tick_db-master/README.md].
* **Database Issues:**
    * Use an SQLite browser tool to inspect the database file specified in `db_path` and verify tables are created and data is being inserted [cite: uploaded:tick_db-master/updated README.md].
    * The script uses `PRAGMA journal_mode=WAL;` for the database connection, which improves concurrency but might behave differently with some network file systems [cite: uploaded:tick_db-master/src/tick_db/db.py].

---

## License

*The `setup.cfg` suggests a potential MIT License, but no explicit license file is present. Assume standard copyright unless otherwise specified.* [cite: uploaded:tick_db-master/setup.cfg]

---
```
